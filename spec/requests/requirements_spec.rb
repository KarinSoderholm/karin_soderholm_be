require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/requirements", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Requirement. As you add validations to Requirement, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # RequirementsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    it "renders a successful response" do
      classroom_attributes =  {
        name: "Crochet 201",
        description: "The intermediate course about crochet",
        image: "https://i.imgur.com/Q1VOgmfb.jpg",
        date: "2021-04-18",
        time: "22:00",
        location: "123 Main St., Wheat Ridge, CO 80033",
        active: true,
        cost: 65.00
      }

      classroom = Classroom.create! classroom_attributes

      valid_attributes = {
        name: "Crochet 101",
        classroom_id: classroom.id
      }

      Requirement.create! valid_attributes
      get requirements_url, headers: valid_headers, as: :json
      expect(response).to be_successful
      json = JSON.parse(response.body, symbolize_names: true)
      expect(json).to be_an Array

      first = json[0]
      expect(first[:id]).to be_an Integer
      expect(first[:name]).to be_a String
      expect(first[:name]).to eq(valid_attributes[:name])
      expect(first[:classroom_id]).to be_an Integer
      expect(first[:classroom_id]).to eq(classroom[:id])
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      classroom_attributes =  {
        name: "Crochet 201",
        description: "The intermediate course about crochet",
        image: "https://i.imgur.com/Q1VOgmfb.jpg",
        date: "2021-04-18",
        time: "22:00",
        location: "123 Main St., Wheat Ridge, CO 80033",
        active: true,
        cost: 65.00
      }

      classroom = Classroom.create! classroom_attributes

      valid_attributes = {
        name: "Crochet 101",
        classroom_id: classroom.id
      }

      requirement = Requirement.create! valid_attributes
      get requirement_url(requirement), as: :json
      expect(response).to be_successful

      json = JSON.parse(response.body, symbolize_names: true)
      expect(json).to be_a Hash
      expect(json[:id]).to be_an Integer
      expect(json[:name]).to be_a String
      expect(json[:name]).to eq(valid_attributes[:name])
      expect(json[:classroom_id]).to be_an Integer
      expect(json[:classroom_id]).to eq(classroom[:id])
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Requirement" do
        classroom_attributes =  {
          name: "Crochet 201",
          description: "The intermediate course about crochet",
          image: "https://i.imgur.com/Q1VOgmfb.jpg",
          date: "2021-04-18",
          time: "22:00",
          location: "123 Main St., Wheat Ridge, CO 80033",
          active: true,
          cost: 65.00
        }

        classroom = Classroom.create! classroom_attributes

        valid_attributes = {
          name: "Crochet 101",
          classroom_id: classroom.id
        }

        expect {
          post requirements_url,
               params: { requirement: valid_attributes }, headers: valid_headers, as: :json
        }.to change(Requirement, :count).by(1)
        expect(response.status).to eq(201)
      end

      it "renders a JSON response with the new requirement" do
        classroom_attributes =  {
          name: "Crochet 201",
          description: "The intermediate course about crochet",
          image: "https://i.imgur.com/Q1VOgmfb.jpg",
          date: "2021-04-18",
          time: "22:00",
          location: "123 Main St., Wheat Ridge, CO 80033",
          active: true,
          cost: 65.00
        }

        classroom = Classroom.create! classroom_attributes

        valid_attributes = {
          name: "Crochet 101",
          classroom_id: classroom.id
        }

        post requirements_url,
             params: { requirement: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
        expect(response.status).to eq(201)
        json = JSON.parse(response.body, symbolize_names: true)
        expect(json).to be_a Hash
        expect(json[:id]).to be_an Integer
        expect(json[:name]).to be_a String
        expect(json[:name]).to eq(valid_attributes[:name])
        expect(json[:classroom_id]).to be_an Integer
        expect(json[:classroom_id]).to eq(classroom[:id])
      end
    end

    context "with invalid parameters" do
      it "does not create a new Requirement" do
        invalid_attributes = {
          name: "Crochet 101",
          classroom_id: nil
        }

        expect {
          post requirements_url,
               params: { requirement: invalid_attributes }, as: :json
        }.to change(Requirement, :count).by(0)
      end

      it "renders a JSON response with errors for the new requirement" do
        classroom_attributes =  {
          name: "Crochet 201",
          description: "The intermediate course about crochet",
          image: "https://i.imgur.com/Q1VOgmfb.jpg",
          date: "2021-04-18",
          time: "22:00",
          location: "123 Main St., Wheat Ridge, CO 80033",
          active: true,
          cost: 65.00
        }

        classroom = Classroom.create! classroom_attributes

        invalid_attributes = {
          name: "",
          classroom_id: classroom.id
        }

        post requirements_url,
             params: { requirement: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq("application/json")
        expect(response.status).to eq(422)
        json = JSON.parse(response.body, symbolize_names: true)
        expect(json).to be_a Hash
        expect(json[:name]).to eq(["can't be blank"])
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested requirement" do
        classroom_attributes =  {
          name: "Crochet 201",
          description: "The intermediate course about crochet",
          image: "https://i.imgur.com/Q1VOgmfb.jpg",
          date: "2021-04-18",
          time: "22:00",
          location: "123 Main St., Wheat Ridge, CO 80033",
          active: true,
          cost: 65.00
        }

        classroom = Classroom.create! classroom_attributes

        valid_attributes = {
          name: "Crochet 101",
          classroom_id: classroom.id
        }

        requirement = Requirement.create! valid_attributes

        new_attributes = {
          name: "Beginning Crochet",
          classroom_id: classroom.id
        }

        patch requirement_url(requirement),
              params: { requirement: new_attributes }, headers: valid_headers, as: :json
        requirement.reload
        expect(response.status).to eq(200)
        json = JSON.parse(response.body, symbolize_names: true)
        expect(json).to be_a Hash
        expect(json[:id]).to be_an Integer
        expect(json[:name]).to be_a String
        expect(json[:name]).to eq(new_attributes[:name])
        expect(json[:name]).to_not eq(valid_attributes[:name])
        expect(json[:classroom_id]).to be_a Integer
      end

      it "renders a JSON response with the requirement" do
        classroom_attributes =  {
          name: "Crochet 201",
          description: "The intermediate course about crochet",
          image: "https://i.imgur.com/Q1VOgmfb.jpg",
          date: "2021-04-18",
          time: "22:00",
          location: "123 Main St., Wheat Ridge, CO 80033",
          active: true,
          cost: 65.00
        }

        classroom = Classroom.create! classroom_attributes

        valid_attributes = {
          name: "Crochet 101",
          classroom_id: classroom.id
        }

        requirement = Requirement.create! valid_attributes

        new_attributes = {
          name: "Beginning Crochet",
          classroom_id: classroom.id
        }

        patch requirement_url(requirement),
              params: { requirement: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the requirement" do
        classroom_attributes =  {
          name: "Crochet 201",
          description: "The intermediate course about crochet",
          image: "https://i.imgur.com/Q1VOgmfb.jpg",
          date: "2021-04-18",
          time: "22:00",
          location: "123 Main St., Wheat Ridge, CO 80033",
          active: true,
          cost: 65.00
        }

        classroom = Classroom.create! classroom_attributes

        valid_attributes = {
          name: "Crochet 101",
          classroom_id: classroom.id
        }

        requirement = Requirement.create! valid_attributes

        invalid_attributes = {
          name: "Beginning Crochet",
          classroom_id: nil
        }

        patch requirement_url(requirement),
              params: { requirement: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq("application/json")
        expect(response.status).to eq(422)
        json = JSON.parse(response.body, symbolize_names: true)
        expect(json).to be_a Hash
        expect(json[:classroom]).to eq(["must exist"])
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested requirement" do
      classroom_attributes =  {
        name: "Crochet 201",
        description: "The intermediate course about crochet",
        image: "https://i.imgur.com/Q1VOgmfb.jpg",
        date: "2021-04-18",
        time: "22:00",
        location: "123 Main St., Wheat Ridge, CO 80033",
        active: true,
        cost: 65.00
      }

      classroom = Classroom.create! classroom_attributes

      valid_attributes = {
        name: "Crochet 101",
        classroom_id: classroom.id
      }

      requirement = Requirement.create! valid_attributes
      expect {
        delete requirement_url(requirement), headers: valid_headers, as: :json
      }.to change(Requirement, :count).by(-1)
    end
  end
end
